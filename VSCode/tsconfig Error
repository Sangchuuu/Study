라이브러리 ts -> js 로 자동 변환을 켜놓고 작업을 하던중
ts에서 export default class CPerformance 코드가
js에서
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
이런식으로 변경이 되었고 해당부분이 오류가 발생하였다.
모든 js 파일이 이런식으로 변환되어 tsconfig를 뒤져보니
 "target": "es2016", 타겟이 es2016으로 되어있었다 
타겟을 ES6로 바꿔주니 정상적으로
export default class CPerformance {}로 나왔다.

  
Tsconfig 참고내용
{
  "compilerOptions": {
      "strict": true,
      "module": "ESNext",                   //기본세팅
      "moduleResolution": "node",             //기본세팅
      "target": "ES6",                        //타겟은 아마도 es6
      "esModuleInterop": true,                //import 시 default export 가 없거나 스펙에 어긋난 호출이 될때 규격에맞게 고쳐준다?
      "noImplicitAny": true,                  //any타입 금지 여부
      "strictNullChecks": false,               //null, undefined 타입에 이상한 짓 할시 에러내기
      "allowJs": true,

      "sourceMap": false,
      "forceConsistentCasingInFileNames": false,
      "skipLibCheck": false,
      "noUnusedParameters": false,
      "noUnusedLocals": false,
  },
  "include": ["WebContent/**/*"], //포함할 디렉토리       // 없어도됨
}

/*
"moduleResolution": "node",             //기본세팅
"compilerOptions": {
"allowJs": true, // js 파일들 ts에서 import해서 쓸 수 있는지 
"checkJs": true, // 일반 js 파일에서도 에러체크 여부 
"jsx": "preserve", // tsx 파일을 jsx로 어떻게 컴파일할 것인지 'preserve', 'react-native', 'react'
"declaration": true, //컴파일시 .d.ts 파일도 자동으로 함께생성 (현재쓰는 모든 타입이 정의된 파일)
"outFile": "./", //모든 ts파일을 js파일 하나로 컴파일해줌 (module이 none, amd, system일 때만 가능)
"outDir": "./", //js파일 아웃풋 경로바꾸기
"rootDir": "./", //루트경로 바꾸기 (js 파일 아웃풋 경로에 영향줌)
"removeComments": true, //컴파일시 주석제거 
"strict": true, //strict 관련, noimplicit 어쩌구 관련 모드 전부 켜기
"noImplicitAny": true, //any타입 금지 여부
"strictNullChecks": true, //null, undefined 타입에 이상한 짓 할시 에러내기 
"strictFunctionTypes": true, //함수파라미터 타입체크 강하게 
"strictPropertyInitialization": true, //class constructor 작성시 타입체크 강하게
"noImplicitThis": true, //this 키워드가 any 타입일 경우 에러내기
"alwaysStrict": true, //자바스크립트 "use strict" 모드 켜기
"noUnusedLocals": true, //쓰지않는 지역변수 있으면 에러내기
"noUnusedParameters": true, //쓰지않는 파라미터 있으면 에러내기
"noImplicitReturns": true, //함수에서 return 빼먹으면 에러내기 
"noFallthroughCasesInSwitch": true, //switch문 이상하면 에러내기 
"esModuleInterop": true, //import 시 default export 가 없거나 스펙에 어긋난 호출이 될때 규격에맞게 고쳐준다?
}
//상단에 묶인거 외의 옵션
"exclude": ["경로"], //포함하지않을 디렉토리  // 없어도됨
"include": ["경로"], //포함할 디렉토리       // 없어도됨
*/
